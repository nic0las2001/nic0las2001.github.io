---
permalink: /:basename
---
/*!
 * undefined vundefined | Â© undefined undefined | undefined Licensed | undefined
 */
(function (Toast) {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: true
            } : {
              done: false,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = true,
      u = false;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = true, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  if ('serviceWorker' in navigator) {
    // Get Jekyll config from URL parameters
    var src = new URL(document.currentScript.src);
    var register = src.searchParams.get('register');
    var baseUrl = src.searchParams.get('baseurl');
    if (register) {
      var swUrl = "".concat(baseUrl, "/sw.min.js");
      var notification = document.getElementById('notification');
      var btnRefresh = notification.querySelector('.toast-body>button');
      var popupWindow = Toast.getOrCreateInstance(notification);
      navigator.serviceWorker.register(swUrl).then(function (registration) {
        // Restore the update window that was last manually closed by the user
        if (registration.waiting) {
          popupWindow.show();
        }
        registration.addEventListener('updatefound', function () {
          registration.installing.addEventListener('statechange', function () {
            if (registration.waiting) {
              if (navigator.serviceWorker.controller) {
                popupWindow.show();
              }
            }
          });
        });
        btnRefresh.addEventListener('click', function () {
          if (registration.waiting) {
            registration.waiting.postMessage('SKIP_WAITING');
          }
          popupWindow.hide();
        });
      });
      var refreshing = false;

      // Detect controller change and refresh all the opened tabs
      navigator.serviceWorker.addEventListener('controllerchange', function () {
        if (!refreshing) {
          window.location.reload();
          refreshing = true;
        }
      });
    } else {
      navigator.serviceWorker.getRegistrations().then(function (registrations) {
        var _iterator = _createForOfIteratorHelper(registrations),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var registration = _step.value;
            registration.unregister();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }

})(Toast);
